// -*- tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
// vi: set et ts=4 sw=2 sts=2:
//
// WARNING
// This file is automatically generated by gausslobatto.mac! Don't edit by hand!

#ifndef DUNE_INCLUDING_IMPLEMENTATION
#error This is a private header that should not be included directly.
#error Use #include <dune/geometry/quadraturerules.hh> instead.
#endif
#undef DUNE_INCLUDING_IMPLEMENTATION

namespace Dune {

  // for fundamental types
  template<typename ct>
  void GaussLobattoQuadratureInitHelper<ct,true>::init(int p,
         std::vector< FieldVector<ct, 1> > & _points,
         std::vector< ct > & _weight,
         int & delivered_order)
  {
    switch(p)
    {
    // order 0,1
    case 0 :
    case 1 :
      delivered_order = 1;
      _points.resize(2);
      _weight.resize(2);
      _points[0] = 0.0;
      _weight[0] = 0.5;
      _points[1] = 1.0;
      _weight[1] = 0.5;
      break;

    // order 2,3
    case 2 :
    case 3 :
      delivered_order = 3;
      _points.resize(3);
      _weight.resize(3);
      _points[0] = 0.0;
      _weight[0] = 0.1666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;
      _points[1] = 1.0;
      _weight[1] = 0.1666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;
      _points[2] = 0.5;
      _weight[2] = 0.6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;
      break;

    // order 4,5
    case 4 :
    case 5 :
      delivered_order = 5;
      _points.resize(4);
      _weight.resize(4);
      _points[0] = 0.0;
      _weight[0] = 0.08333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333;
      _points[1] = 1.0;
      _weight[1] = 0.08333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333;
      _points[2] = 0.7236067977499789696409173668731276235440618359611525724270897245410520925637804899414414408378782274;
      _weight[2] = 0.4166666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;
      _points[3] = 0.2763932022500210303590826331268723764559381640388474275729102754589479074362195100585585591621217725;
      _weight[3] = 0.4166666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;
      break;

    // order 6,7
    case 6 :
    case 7 :
      delivered_order = 7;
      _points.resize(5);
      _weight.resize(5);
      _points[0] = 0.0;
      _weight[0] = 0.05;
      _points[1] = 1.0;
      _weight[1] = 0.05;
      _points[2] = 0.8273268353539885718991462281234291777846040411977122787576601517076334589676979204717401113923889309;
      _weight[2] = 0.2722222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222;
      _points[3] = 0.172673164646011428100853771876570822215395958802287721242339848292366541032302079528259888607611069;
      _weight[3] = 0.2722222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222;
      _points[4] = 0.5;
      _weight[4] = 0.3555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555;
      break;

    // order 8,9
    case 8 :
    case 9 :
      delivered_order = 9;
      _points.resize(6);
      _weight.resize(6);
      _points[0] = 1.0;
      _weight[0] = 0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333;
      _points[1] = 0.0;
      _weight[1] = 0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333;
      _points[2] = 0.8825276619647323464255014869796690751828678442680521196637911779185276585194132570617486353648669365;
      _weight[2] = 0.1892374781489234901583064041060123262381623469486258303271944256799821862794952728706601185587576064;
      _points[3] = 0.1174723380352676535744985130203309248171321557319478803362088220814723414805867429382513646351330634;
      _weight[3] = 0.1892374781489234901583064041060123262381623469486258303271944256799821862794952728706601185587576064;
      _points[4] = 0.6426157582403225481570754970204395359595017363632126959098752082638489654570997990908378640025315086;
      _weight[4] = 0.2774291885177431765083602625606543404285043197180408363394722409866844803871713937960065481079090601;
      _points[5] = 0.3573842417596774518429245029795604640404982636367873040901247917361510345429002009091621359974684913;
      _weight[5] = 0.2774291885177431765083602625606543404285043197180408363394722409866844803871713937960065481079090601;
      break;

    // order 10,11
    case 10 :
    case 11 :
      delivered_order = 11;
      _points.resize(7);
      _weight.resize(7);
      _points[0] = 1.0;
      _weight[0] = 0.0238095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238;
      _points[1] = 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002904443936136988704613522974964763885677664394036593149115822206008312261073264473647011675707760947;
      _weight[1] = 0.0238095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238;
      _points[2] = 0.08488805186071653506398389301626743020641481756400195420459339398355773991365476236892514937696012313;
      _weight[2] = 0.1384130236807829740053502031450331467488136400899412345912671194817223119377730668076642690885561219;
      _points[3] = 0.9151119481392834649360161069837325697935851824359980457954066060164422600863452376310748506230398768;
      _weight[3] = 0.1384130236807829740053502031450331467488136400899412345912671194817223119377730668076642690885561219;
      _points[4] = 0.7344243967353571069018859409543831647027987358359223785513347296814777650585638543983611678787947876;
      _weight[4] = 0.2158726906049313117089355111406811389654720741957730511230185948039919737765126474780500166257295923;
      _points[5] = 0.2655756032646428930981140590456168352972012641640776214486652703185222349414361456016388321212052123;
      _weight[5] = 0.2158726906049313117089355111406811389654720741957730511230185948039919737765126474780500166257295923;
      _points[6] = 0.5;
      _weight[6] = 0.2438095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238;
      break;

    default :
      DUNE_THROW(QuadratureOrderOutOfRange, "Quadrature rule " << p << " not supported!");
    }
  }

  // for non-fundamental types: assign numbers as strings
  template<typename ct>
  void GaussLobattoQuadratureInitHelper<ct,false>::init(int p,
         std::vector< FieldVector<ct, 1> > & _points,
         std::vector< ct > & _weight,
         int & delivered_order)
  {
    switch(p)
    {
    // order 0,1
    case 0 :
    case 1 :
      delivered_order = 1;
      _points.resize(2);
      _weight.resize(2);
      _points[0] = ct("0.0");
      _weight[0] = ct("0.5");
      _points[1] = ct("1.0");
      _weight[1] = ct("0.5");
      break;

    // order 2,3
    case 2 :
    case 3 :
      delivered_order = 3;
      _points.resize(3);
      _weight.resize(3);
      _points[0] = ct("0.0");
      _weight[0] = ct("0.1666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666");
      _points[1] = ct("1.0");
      _weight[1] = ct("0.1666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666");
      _points[2] = ct("0.5");
      _weight[2] = ct("0.6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666");
      break;

    // order 4,5
    case 4 :
    case 5 :
      delivered_order = 5;
      _points.resize(4);
      _weight.resize(4);
      _points[0] = ct("0.0");
      _weight[0] = ct("0.08333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333");
      _points[1] = ct("1.0");
      _weight[1] = ct("0.08333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333");
      _points[2] = ct("0.7236067977499789696409173668731276235440618359611525724270897245410520925637804899414414408378782274");
      _weight[2] = ct("0.4166666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666");
      _points[3] = ct("0.2763932022500210303590826331268723764559381640388474275729102754589479074362195100585585591621217725");
      _weight[3] = ct("0.4166666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666");
      break;

    // order 6,7
    case 6 :
    case 7 :
      delivered_order = 7;
      _points.resize(5);
      _weight.resize(5);
      _points[0] = ct("0.0");
      _weight[0] = ct("0.05");
      _points[1] = ct("1.0");
      _weight[1] = ct("0.05");
      _points[2] = ct("0.8273268353539885718991462281234291777846040411977122787576601517076334589676979204717401113923889309");
      _weight[2] = ct("0.2722222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222");
      _points[3] = ct("0.172673164646011428100853771876570822215395958802287721242339848292366541032302079528259888607611069");
      _weight[3] = ct("0.2722222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222");
      _points[4] = ct("0.5");
      _weight[4] = ct("0.3555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555");
      break;

    // order 8,9
    case 8 :
    case 9 :
      delivered_order = 9;
      _points.resize(6);
      _weight.resize(6);
      _points[0] = ct("1.0");
      _weight[0] = ct("0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333");
      _points[1] = ct("0.0");
      _weight[1] = ct("0.03333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333");
      _points[2] = ct("0.8825276619647323464255014869796690751828678442680521196637911779185276585194132570617486353648669365");
      _weight[2] = ct("0.1892374781489234901583064041060123262381623469486258303271944256799821862794952728706601185587576064");
      _points[3] = ct("0.1174723380352676535744985130203309248171321557319478803362088220814723414805867429382513646351330634");
      _weight[3] = ct("0.1892374781489234901583064041060123262381623469486258303271944256799821862794952728706601185587576064");
      _points[4] = ct("0.6426157582403225481570754970204395359595017363632126959098752082638489654570997990908378640025315086");
      _weight[4] = ct("0.2774291885177431765083602625606543404285043197180408363394722409866844803871713937960065481079090601");
      _points[5] = ct("0.3573842417596774518429245029795604640404982636367873040901247917361510345429002009091621359974684913");
      _weight[5] = ct("0.2774291885177431765083602625606543404285043197180408363394722409866844803871713937960065481079090601");
      break;

    // order 10,11
    case 10 :
    case 11 :
      delivered_order = 11;
      _points.resize(7);
      _weight.resize(7);
      _points[0] = ct("1.0");
      _weight[0] = ct("0.0238095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238");
      _points[1] = ct("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002904443936136988704613522974964763885677664394036593149115822206008312261073264473647011675707760947");
      _weight[1] = ct("0.0238095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238");
      _points[2] = ct("0.08488805186071653506398389301626743020641481756400195420459339398355773991365476236892514937696012313");
      _weight[2] = ct("0.1384130236807829740053502031450331467488136400899412345912671194817223119377730668076642690885561219");
      _points[3] = ct("0.9151119481392834649360161069837325697935851824359980457954066060164422600863452376310748506230398768");
      _weight[3] = ct("0.1384130236807829740053502031450331467488136400899412345912671194817223119377730668076642690885561219");
      _points[4] = ct("0.7344243967353571069018859409543831647027987358359223785513347296814777650585638543983611678787947876");
      _weight[4] = ct("0.2158726906049313117089355111406811389654720741957730511230185948039919737765126474780500166257295923");
      _points[5] = ct("0.2655756032646428930981140590456168352972012641640776214486652703185222349414361456016388321212052123");
      _weight[5] = ct("0.2158726906049313117089355111406811389654720741957730511230185948039919737765126474780500166257295923");
      _points[6] = ct("0.5");
      _weight[6] = ct("0.2438095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238095238");
      break;

    default :
      DUNE_THROW(QuadratureOrderOutOfRange, "Quadrature rule " << p << " not supported!");
    }
  }

} // namespace
