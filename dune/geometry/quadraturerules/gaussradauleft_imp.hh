// -*- tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
// vi: set et ts=4 sw=2 sts=2:
//
// WARNING
// This file is automatically generated by gaussradau.mac! Don't edit by hand!

#ifndef DUNE_INCLUDING_IMPLEMENTATION
#error This is a private header that should not be included directly.
#error Use #include <dune/geometry/quadraturerules.hh> instead.
#endif
#undef DUNE_INCLUDING_IMPLEMENTATION

namespace Dune {

  // for fundamental types
  template<typename ct>
  void GaussRadauLeftQuadratureInitHelper<ct,true>::init(int p,
         std::vector< FieldVector<ct, 1> > & _points,
         std::vector< ct > & _weight,
         int & delivered_order)
  {
    switch(p)
    {
    case 0 :
      delivered_order = 0;
      _points.resize(1);
      _weight.resize(1);
      _points[0] = 0.0;
      _weight[0] = 1.0;
      break;

    // order 1,2
    case 1 :
    case 2 :
      delivered_order = 2;
      _points.resize(2);
      _weight.resize(2);
      _points[0] = 0.0;
      _weight[0] = 0.25;
      _points[1] = 0.6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666;
      _weight[1] = 0.75;
      break;

    // order 3,4
    case 3 :
    case 4 :
      delivered_order = 4;
      _points.resize(3);
      _weight.resize(3);
      _points[0] = 0.0;
      _weight[0] = 0.1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
      _points[1] = 0.8449489742783178098197284074705891391965947480656670128432692567250960377457315026539859433104640234;
      _weight[1] = 0.3764030627004672750500754423692807946676125699817591630990918731319177672928523603738927935248711045;
      _points[2] = 0.3550510257216821901802715925294108608034052519343329871567307432749039622542684973460140566895359765;
      _weight[2] = 0.5124858261884216138388134465196080942212763189071297257897970157569711215960365285149960953640177843;
      break;

    // order 5,6
    case 5 :
    case 6 :
      delivered_order = 6;
      _points.resize(4);
      _weight.resize(4);
      _points[0] = 0.0;
      _weight[0] = 0.0625;
      _points[1] = 0.9114120404872960526044538562305438031142706680772504345688363048300235125731899032747806923838984214;
      _weight[1] = 0.2204622111767683752754784720371859890529167281230873116876396332191458306523173431813869747371986422;
      _points[2] = 0.2123405382391529439747581101240003766519199414890261591145475508607692831081746308640139445069166552;
      _weight[2] = 0.3288443199800597439442892210727968317490234075874455536546030877312606057631737874914764364720579267;
      _points[3] = 0.5905331355592652891350737479311701059480951047194376920309018585949214900329211801469196488234706375;
      _weight[3] = 0.388193468843171880780232306890017179198059864289467134657757279049593563584508869327136588790743431;
      break;

    // order 7,8
    case 7 :
    case 8 :
      delivered_order = 8;
      _points.resize(5);
      _weight.resize(5);
      _points[0] = 0.0;
      _weight[0] = 0.03999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999;
      _points[1] = 0.9428958038854823178068788074458843787649220544012498356721917070690653217979268354138861831801572631;
      _weight[1] = 0.1437135607912259413234122198541102271589229617318809184244815352000477933742653045394234927685913557;
      _points[2] = 0.1397598643437805521520870811248802332616219774127744950757664058160257420698344355865098450735723893;
      _weight[2] = 0.2231039010835707444025602182285893596530132769666542171491954357318447595238752822393854332837929434;
      _points[3] = 0.7231569863618761723199540023143748588891108303049695316505579511688786603162919632274584714359488691;
      _weight[3] = 0.28135601514946206019217265034065989120000299266737412219813168211940937087419012854107836846850562;
      _points[4] = 0.4164095676310831799433023313370827513065673601032283598237061581682524980381689879943677225325437006;
      _weight[4] = 0.3118265229757412540818549115766405219880607686340907422281913469486980762276692846801127054791100807;
      break;

    // order 9,10
    case 9 :
    case 10 :
      delivered_order = 10;
      _points.resize(6);
      _weight.resize(6);
      _points[0] = 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002904443936136988704613522974964763885677664394036593149115822206008312261073264473647011675707760947;
      _weight[0] = 0.02777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777;
      _points[1] = 0.9601901429485312576591933099066668322957373457716148380535922517950352543738256931454977409168154327;
      _weight[1] = 0.1007941926267404201046003778745677818586739544978990469020905175031896616185019326523859081070179564;
      _points[2] = 0.09853508579882642612349889788775269038051356954828979943626418694343487404001393811382476449539206683;
      _weight[2] = 0.15982037661025548327288999189811797479611146812876839180378402272111432088446591677960283187954084;
      _points[3] = 0.8019865821263918274642078632047037639618136411662111207916708231727912882713534973402270785858446056;
      _weight[3] = 0.2084506671559538694797031913713231216677075046880940122344846434185750632010718140854202072910519794;
      _points[4] = 0.3045357266463639054853851762788328386059984450013516409148027388674711861631761331260749534539964475;
      _weight[4] = 0.2426935942344849580799139577934448339939675840621020934694189186061539713876707499244320986309746931;
      _points[5] = 0.5620251897526138559949874799947711474832097257852598735309427264939946698789034655471027352752241744;
      _weight[5] = 0.2604633915947874912851147032847685099057617108453586778124441199731892051305118087803811763136367531;
      break;

    default :
      DUNE_THROW(QuadratureOrderOutOfRange, "Quadrature rule " << p << " not supported!");
    }
  }

  // for non-fundamental types: assign numbers as strings
  template<typename ct>
  void GaussRadauLeftQuadratureInitHelper<ct,false>::init(int p,
         std::vector< FieldVector<ct, 1> > & _points,
         std::vector< ct > & _weight,
         int & delivered_order)
  {
    switch(p)
    {
    case 0 :
      delivered_order = 0;
      _points.resize(1);
      _weight.resize(1);
      _points[0] = ct("0.0");
      _weight[0] = ct("1.0");
      break;

    // order 1,2
    case 1 :
    case 2 :
      delivered_order = 2;
      _points.resize(2);
      _weight.resize(2);
      _points[0] = ct("0.0");
      _weight[0] = ct("0.25");
      _points[1] = ct("0.6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666");
      _weight[1] = ct("0.75");
      break;

    // order 3,4
    case 3 :
    case 4 :
      delivered_order = 4;
      _points.resize(3);
      _weight.resize(3);
      _points[0] = ct("0.0");
      _weight[0] = ct("0.1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
      _points[1] = ct("0.8449489742783178098197284074705891391965947480656670128432692567250960377457315026539859433104640234");
      _weight[1] = ct("0.3764030627004672750500754423692807946676125699817591630990918731319177672928523603738927935248711045");
      _points[2] = ct("0.3550510257216821901802715925294108608034052519343329871567307432749039622542684973460140566895359765");
      _weight[2] = ct("0.5124858261884216138388134465196080942212763189071297257897970157569711215960365285149960953640177843");
      break;

    // order 5,6
    case 5 :
    case 6 :
      delivered_order = 6;
      _points.resize(4);
      _weight.resize(4);
      _points[0] = ct("0.0");
      _weight[0] = ct("0.0625");
      _points[1] = ct("0.9114120404872960526044538562305438031142706680772504345688363048300235125731899032747806923838984214");
      _weight[1] = ct("0.2204622111767683752754784720371859890529167281230873116876396332191458306523173431813869747371986422");
      _points[2] = ct("0.2123405382391529439747581101240003766519199414890261591145475508607692831081746308640139445069166552");
      _weight[2] = ct("0.3288443199800597439442892210727968317490234075874455536546030877312606057631737874914764364720579267");
      _points[3] = ct("0.5905331355592652891350737479311701059480951047194376920309018585949214900329211801469196488234706375");
      _weight[3] = ct("0.388193468843171880780232306890017179198059864289467134657757279049593563584508869327136588790743431");
      break;

    // order 7,8
    case 7 :
    case 8 :
      delivered_order = 8;
      _points.resize(5);
      _weight.resize(5);
      _points[0] = ct("0.0");
      _weight[0] = ct("0.03999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
      _points[1] = ct("0.9428958038854823178068788074458843787649220544012498356721917070690653217979268354138861831801572631");
      _weight[1] = ct("0.1437135607912259413234122198541102271589229617318809184244815352000477933742653045394234927685913557");
      _points[2] = ct("0.1397598643437805521520870811248802332616219774127744950757664058160257420698344355865098450735723893");
      _weight[2] = ct("0.2231039010835707444025602182285893596530132769666542171491954357318447595238752822393854332837929434");
      _points[3] = ct("0.7231569863618761723199540023143748588891108303049695316505579511688786603162919632274584714359488691");
      _weight[3] = ct("0.28135601514946206019217265034065989120000299266737412219813168211940937087419012854107836846850562");
      _points[4] = ct("0.4164095676310831799433023313370827513065673601032283598237061581682524980381689879943677225325437006");
      _weight[4] = ct("0.3118265229757412540818549115766405219880607686340907422281913469486980762276692846801127054791100807");
      break;

    // order 9,10
    case 9 :
    case 10 :
      delivered_order = 10;
      _points.resize(6);
      _weight.resize(6);
      _points[0] = ct("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002904443936136988704613522974964763885677664394036593149115822206008312261073264473647011675707760947");
      _weight[0] = ct("0.02777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777");
      _points[1] = ct("0.9601901429485312576591933099066668322957373457716148380535922517950352543738256931454977409168154327");
      _weight[1] = ct("0.1007941926267404201046003778745677818586739544978990469020905175031896616185019326523859081070179564");
      _points[2] = ct("0.09853508579882642612349889788775269038051356954828979943626418694343487404001393811382476449539206683");
      _weight[2] = ct("0.15982037661025548327288999189811797479611146812876839180378402272111432088446591677960283187954084");
      _points[3] = ct("0.8019865821263918274642078632047037639618136411662111207916708231727912882713534973402270785858446056");
      _weight[3] = ct("0.2084506671559538694797031913713231216677075046880940122344846434185750632010718140854202072910519794");
      _points[4] = ct("0.3045357266463639054853851762788328386059984450013516409148027388674711861631761331260749534539964475");
      _weight[4] = ct("0.2426935942344849580799139577934448339939675840621020934694189186061539713876707499244320986309746931");
      _points[5] = ct("0.5620251897526138559949874799947711474832097257852598735309427264939946698789034655471027352752241744");
      _weight[5] = ct("0.2604633915947874912851147032847685099057617108453586778124441199731892051305118087803811763136367531");
      break;

    default :
      DUNE_THROW(QuadratureOrderOutOfRange, "Quadrature rule " << p << " not supported!");
    }
  }

} // namespace
