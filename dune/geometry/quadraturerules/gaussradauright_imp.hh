// -*- tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
// vi: set et ts=4 sw=2 sts=2:
//
// WARNING
// This file is automatically generated by gaussradau.mac! Don't edit by hand!

#ifndef DUNE_INCLUDING_IMPLEMENTATION
#error This is a private header that should not be included directly.
#error Use #include <dune/geometry/quadraturerules.hh> instead.
#endif
#undef DUNE_INCLUDING_IMPLEMENTATION

namespace Dune {

  // for fundamental types
  template<typename ct>
  void GaussRadauRightQuadratureInitHelper<ct,true>::init(int p,
         std::vector< FieldVector<ct, 1> > & _points,
         std::vector< ct > & _weight,
         int & delivered_order)
  {
    switch(p)
    {
    case 0 :
      delivered_order = 0;
      _points.resize(1);
      _weight.resize(1);
      _points[0] = 1.0;
      _weight[0] = 1.0;
      break;

    // order 1,2
    case 1 :
    case 2 :
      delivered_order = 2;
      _points.resize(2);
      _weight.resize(2);
      _points[0] = 1.0;
      _weight[0] = 0.25;
      _points[1] = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333;
      _weight[1] = 0.75;
      break;

    // order 3,4
    case 3 :
    case 4 :
      delivered_order = 4;
      _points.resize(3);
      _weight.resize(3);
      _points[0] = 1.0;
      _weight[0] = 0.1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
      _points[1] = 0.1550510257216821901802715925294108608034052519343329871567307432749039622542684973460140566895359765;
      _weight[1] = 0.3764030627004672750500754423692807946676125699817591630990918731319177672928523603738927935248711045;
      _points[2] = 0.6449489742783178098197284074705891391965947480656670128432692567250960377457315026539859433104640234;
      _weight[2] = 0.5124858261884216138388134465196080942212763189071297257897970157569711215960365285149960953640177843;
      break;

    // order 5,6
    case 5 :
    case 6 :
      delivered_order = 6;
      _points.resize(4);
      _weight.resize(4);
      _points[0] = 1.0;
      _weight[0] = 0.0625;
      _points[1] = 0.08858795951270394739554614376945619688572933192274956543116369516997648742681009672521930761610157857;
      _weight[1] = 0.2204622111767683752754784720371859890529167281230873116876396332191458306523173431813869747371986422;
      _points[2] = 0.7876594617608470560252418898759996233480800585109738408854524491392307168918253691359860554930833447;
      _weight[2] = 0.3288443199800597439442892210727968317490234075874455536546030877312606057631737874914764364720579267;
      _points[3] = 0.4094668644407347108649262520688298940519048952805623079690981414050785099670788198530803511765293624;
      _weight[3] = 0.388193468843171880780232306890017179198059864289467134657757279049593563584508869327136588790743431;
      break;

    // order 7,8
    case 7 :
    case 8 :
      delivered_order = 8;
      _points.resize(5);
      _weight.resize(5);
      _points[0] = 1.0;
      _weight[0] = 0.03999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999;
      _points[1] = 0.05710419611451768219312119255411562123507794559875016432780829293093467820207316458611381681984273686;
      _weight[1] = 0.1437135607912259413234122198541102271589229617318809184244815352000477933742653045394234927685913557;
      _points[2] = 0.8602401356562194478479129188751197667383780225872255049242335941839742579301655644134901549264276106;
      _weight[2] = 0.2231039010835707444025602182285893596530132769666542171491954357318447595238752822393854332837929434;
      _points[3] = 0.2768430136381238276800459976856251411108891696950304683494420488311213396837080367725415285640511308;
      _weight[3] = 0.28135601514946206019217265034065989120000299266737412219813168211940937087419012854107836846850562;
      _points[4] = 0.5835904323689168200566976686629172486934326398967716401762938418317475019618310120056322774674562993;
      _weight[4] = 0.3118265229757412540818549115766405219880607686340907422281913469486980762276692846801127054791100807;
      break;

    // order 9,10
    case 9 :
    case 10 :
      delivered_order = 10;
      _points.resize(6);
      _weight.resize(6);
      _points[0] = 0.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999;
      _weight[0] = 0.02777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777;
      _points[1] = 0.03980985705146874234080669009333316770426265422838516194640774820496474562617430685450225908318456723;
      _weight[1] = 0.1007941926267404201046003778745677818586739544978990469020905175031896616185019326523859081070179564;
      _points[2] = 0.9014649142011735738765011021122473096194864304517102005637358130565651259599860618861752355046079331;
      _weight[2] = 0.15982037661025548327288999189811797479611146812876839180378402272111432088446591677960283187954084;
      _points[3] = 0.1980134178736081725357921367952962360381863588337888792083291768272087117286465026597729214141553943;
      _weight[3] = 0.2084506671559538694797031913713231216677075046880940122344846434185750632010718140854202072910519794;
      _points[4] = 0.6954642733536360945146148237211671613940015549986483590851972611325288138368238668739250465460035524;
      _weight[4] = 0.2426935942344849580799139577934448339939675840621020934694189186061539713876707499244320986309746931;
      _points[5] = 0.4379748102473861440050125200052288525167902742147401264690572735060053301210965344528972647247758255;
      _weight[5] = 0.2604633915947874912851147032847685099057617108453586778124441199731892051305118087803811763136367531;
      break;

    default :
      DUNE_THROW(QuadratureOrderOutOfRange, "Quadrature rule " << p << " not supported!");
    }
  }

  // for non-fundamental types: assign numbers as strings
  template<typename ct>
  void GaussRadauRightQuadratureInitHelper<ct,false>::init(int p,
         std::vector< FieldVector<ct, 1> > & _points,
         std::vector< ct > & _weight,
         int & delivered_order)
  {
    switch(p)
    {
    case 0 :
      delivered_order = 0;
      _points.resize(1);
      _weight.resize(1);
      _points[0] = ct("1.0");
      _weight[0] = ct("1.0");
      break;

    // order 1,2
    case 1 :
    case 2 :
      delivered_order = 2;
      _points.resize(2);
      _weight.resize(2);
      _points[0] = ct("1.0");
      _weight[0] = ct("0.25");
      _points[1] = ct("0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333");
      _weight[1] = ct("0.75");
      break;

    // order 3,4
    case 3 :
    case 4 :
      delivered_order = 4;
      _points.resize(3);
      _weight.resize(3);
      _points[0] = ct("1.0");
      _weight[0] = ct("0.1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
      _points[1] = ct("0.1550510257216821901802715925294108608034052519343329871567307432749039622542684973460140566895359765");
      _weight[1] = ct("0.3764030627004672750500754423692807946676125699817591630990918731319177672928523603738927935248711045");
      _points[2] = ct("0.6449489742783178098197284074705891391965947480656670128432692567250960377457315026539859433104640234");
      _weight[2] = ct("0.5124858261884216138388134465196080942212763189071297257897970157569711215960365285149960953640177843");
      break;

    // order 5,6
    case 5 :
    case 6 :
      delivered_order = 6;
      _points.resize(4);
      _weight.resize(4);
      _points[0] = ct("1.0");
      _weight[0] = ct("0.0625");
      _points[1] = ct("0.08858795951270394739554614376945619688572933192274956543116369516997648742681009672521930761610157857");
      _weight[1] = ct("0.2204622111767683752754784720371859890529167281230873116876396332191458306523173431813869747371986422");
      _points[2] = ct("0.7876594617608470560252418898759996233480800585109738408854524491392307168918253691359860554930833447");
      _weight[2] = ct("0.3288443199800597439442892210727968317490234075874455536546030877312606057631737874914764364720579267");
      _points[3] = ct("0.4094668644407347108649262520688298940519048952805623079690981414050785099670788198530803511765293624");
      _weight[3] = ct("0.388193468843171880780232306890017179198059864289467134657757279049593563584508869327136588790743431");
      break;

    // order 7,8
    case 7 :
    case 8 :
      delivered_order = 8;
      _points.resize(5);
      _weight.resize(5);
      _points[0] = ct("1.0");
      _weight[0] = ct("0.03999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
      _points[1] = ct("0.05710419611451768219312119255411562123507794559875016432780829293093467820207316458611381681984273686");
      _weight[1] = ct("0.1437135607912259413234122198541102271589229617318809184244815352000477933742653045394234927685913557");
      _points[2] = ct("0.8602401356562194478479129188751197667383780225872255049242335941839742579301655644134901549264276106");
      _weight[2] = ct("0.2231039010835707444025602182285893596530132769666542171491954357318447595238752822393854332837929434");
      _points[3] = ct("0.2768430136381238276800459976856251411108891696950304683494420488311213396837080367725415285640511308");
      _weight[3] = ct("0.28135601514946206019217265034065989120000299266737412219813168211940937087419012854107836846850562");
      _points[4] = ct("0.5835904323689168200566976686629172486934326398967716401762938418317475019618310120056322774674562993");
      _weight[4] = ct("0.3118265229757412540818549115766405219880607686340907422281913469486980762276692846801127054791100807");
      break;

    // order 9,10
    case 9 :
    case 10 :
      delivered_order = 10;
      _points.resize(6);
      _weight.resize(6);
      _points[0] = ct("0.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
      _weight[0] = ct("0.02777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777");
      _points[1] = ct("0.03980985705146874234080669009333316770426265422838516194640774820496474562617430685450225908318456723");
      _weight[1] = ct("0.1007941926267404201046003778745677818586739544978990469020905175031896616185019326523859081070179564");
      _points[2] = ct("0.9014649142011735738765011021122473096194864304517102005637358130565651259599860618861752355046079331");
      _weight[2] = ct("0.15982037661025548327288999189811797479611146812876839180378402272111432088446591677960283187954084");
      _points[3] = ct("0.1980134178736081725357921367952962360381863588337888792083291768272087117286465026597729214141553943");
      _weight[3] = ct("0.2084506671559538694797031913713231216677075046880940122344846434185750632010718140854202072910519794");
      _points[4] = ct("0.6954642733536360945146148237211671613940015549986483590851972611325288138368238668739250465460035524");
      _weight[4] = ct("0.2426935942344849580799139577934448339939675840621020934694189186061539713876707499244320986309746931");
      _points[5] = ct("0.4379748102473861440050125200052288525167902742147401264690572735060053301210965344528972647247758255");
      _weight[5] = ct("0.2604633915947874912851147032847685099057617108453586778124441199731892051305118087803811763136367531");
      break;

    default :
      DUNE_THROW(QuadratureOrderOutOfRange, "Quadrature rule " << p << " not supported!");
    }
  }

} // namespace
