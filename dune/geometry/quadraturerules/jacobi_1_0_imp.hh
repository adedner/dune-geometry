// -*- tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
// vi: set et ts=4 sw=2 sts=2:
//
// WARNING
// This file is automatically generated by jacobian.mac! Don't edit by hand!

#ifndef DUNE_INCLUDING_IMPLEMENTATION
#error This is a private header that should not be included directly.
#error Use #include <dune/geometry/quadraturerules.hh> instead.
#endif
#undef DUNE_INCLUDING_IMPLEMENTATION

namespace Dune {

  // for fundamental types
  template<typename ct>
  void Jacobi1QuadratureInitHelper<ct,true>::init(int p,
         std::vector< FieldVector<ct, 1> > & _points,
         std::vector< ct > & _weight,
         int & delivered_order)
  {
    switch(p)
    {
    case 0 :
    case 1 :
      delivered_order = 1;
      _points.resize(1);
      _weight.resize(1);
      _points[0] = 0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333;
      _weight[0] = 1.0;
      break;
    case 2 :
    case 3 :
      delivered_order = 3;
      _points.resize(2);
      _weight.resize(2);
      _points[0] = 0.6449489742783178098197284074705891391965947480656670128432692567250960377457315026539859433104640235;
      _weight[0] = 0.3639172365120456612112619958496727004463362510746294373092948573749466456968158318588966981608533203;
      _points[1] = 0.1550510257216821901802715925294108608034052519343329871567307432749039622542684973460140566895359765;
      _weight[1] = 0.6360827634879543387887380041503272995536637489253705626907051426250533543031841681411033018391466797;
      break;
    case 4 :
    case 5 :
      delivered_order = 5;
      _points.resize(3);
      _weight.resize(3);
      _points[0] = 0.7876594617608470560252418898759996233480800585109738408854524491392307168918253691359860554930833447;
      _weight[0] = 0.1396539598029082450677625443581538098252225758276251979994248447935389105334084604080564612661091634;
      _points[1] = 0.08858795951270394739554614376945619688572933192274956543116369516997648742681009672521930761610157858;
      _weight[1] = 0.4018638274779192615443962665291996972772826161899046690923842878330733109101018240536312300474029069;
      _points[2] = 0.4094668644407347108649262520688298940519048952805623079690981414050785099670788198530803511765293624;
      _weight[2] = 0.4584822127191724933878411891126464928974948079824701329081908673733877785564897155383123086864879298;
      break;
    case 6 :
    case 7 :
      delivered_order = 7;
      _points.resize(4);
      _weight.resize(4);
      _points[0] = 0.8602401356562194478479129188751197667383780225872255049242335941839742579301655644134901549264276107;
      _weight[0] = 0.0623619419000161643477502941931506212697875166839309830761809569911317040022539361293684065166161988;
      _points[1] = 0.5835904323689168200566976686629172486934326398967716401762938418317475019618310120056322774674562994;
      _weight[1] = 0.2596950952164648816529124057792580292271059432720818009310478738715197515684797549856501468079414159;
      _points[2] = 0.05710419611451768219312119255411562123507794559875016432780829293093467820207316458611381681984273682;
      _weight[2] = 0.2710138268629762324165283481558817992920669850614066882947002084270279998974049555934063155149987714;
      _points[3] = 0.2768430136381238276800459976856251411108891696950304683494420488311213396837080367725415285640511309;
      _weight[3] = 0.4069291360205427215828089518717095502110395549825805276980709607103205445318613532915751311604436132;
      break;
    case 8 :
    case 9 :
      delivered_order = 9;
      _points.resize(5);
      _weight.resize(5);
      _points[0] = 0.9014649142011735738765011021122473096194864304517102005637358130565651259599860618861752355046079332;
      _weight[0] = 0.03149582904338455237058463313697596258298062393862741207778897431029291618946468034442481885294203153;
      _points[1] = 0.6954642733536360945146148237211671613940015549986483590851972611325288138368238668739250465460035525;
      _weight[1] = 0.147817740145233340701266438683407157647088123302568081608965017046687166399586788131013562994436696;
      _points[2] = 0.03980985705146874234080669009333316770426265422838516194640774820496474562617430685450225908318456724;
      _weight[2] = 0.1935631804533033585487219432723014706300773723042959314554533779929073487933655762166538198748335154;
      _points[3] = 0.4379748102473861440050125200052288525167902742147401264690572735060053301210965344528972647247758255;
      _weight[3] = 0.2927739741693396173960757387119177719719819871066279796088146708892391099142328799058439924278608752;
      _points[4] = 0.1980134178736081725357921367952962360381863588337888792083291768272087117286465026597729214141553943;
      _weight[4] = 0.3343492761887391309833512461953976371678718933478805952489779597608734587033500754020638058499268799;
      break;
    case 10 :
    case 11 :
      delivered_order = 11;
      _points.resize(6);
      _weight.resize(6);
      _points[0] = 0.9269456713197411148518739658196820110561724195422832527244670796566452024525282438143394800135873916;
      _weight[0] = 0.01747660362721906351203460662479774148929411516337233806318102016698451025225396235129028371682599565;
      _points[1] = 0.7692338620300545009168833601156454518371421433222954161669481696365481305739532856852002115427743676;
      _weight[1] = 0.08791033110101795101635324861086019025599267125557955276461742797557562193809890394074140334644478675;
      _points[2] = 0.02931642715978489197205027691316491037373039256371492778691068394493603824166577874863094836518436948;
      _weight[2] = 0.1446206614510173673109086522496639352868157617754660467953566358954592311021538274525319681276946567;
      _points[3] = 0.5586715187715501320813933418055219400743682889654078255557472261173501228974210783238200520122825819;
      _weight[3] = 0.1973223017813105282411690210967195758979330860171400109013608542168691368036765872249948825320820935;
      _points[4] = 0.1480785996684842918499768524959792122302487748085944614125946418015983860908783218063693976617475761;
      _weight[4] = 0.2710849944630372336813807932761008554153744603412901289757132736303442652218840953547976196174453532;
      _points[5] = 0.3369846902811542990970529720807757051975687500284733471225629680736913505127840608524091411736544825;
      _weight[5] = 0.2815851075763978562381536781418577016545899054471519224997707881147672346819326236756438426595071102;
      break;
    default :
      DUNE_THROW(QuadratureOrderOutOfRange, "Quadrature rule " << p << " not supported!");
    }
  }

  // for non-fundamental types: assign numbers as strings
  template<typename ct>
  void Jacobi1QuadratureInitHelper<ct,false>::init(int p,
         std::vector< FieldVector<ct, 1> > & _points,
         std::vector< ct > & _weight,
         int & delivered_order)
  {
    switch(p)
    {
    case 0 :
    case 1 :
      delivered_order = 1;
      _points.resize(1);
      _weight.resize(1);
      _points[0] = ct("0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333");
      _weight[0] = ct("1.0");
      break;
    case 2 :
    case 3 :
      delivered_order = 3;
      _points.resize(2);
      _weight.resize(2);
      _points[0] = ct("0.6449489742783178098197284074705891391965947480656670128432692567250960377457315026539859433104640235");
      _weight[0] = ct("0.3639172365120456612112619958496727004463362510746294373092948573749466456968158318588966981608533203");
      _points[1] = ct("0.1550510257216821901802715925294108608034052519343329871567307432749039622542684973460140566895359765");
      _weight[1] = ct("0.6360827634879543387887380041503272995536637489253705626907051426250533543031841681411033018391466797");
      break;
    case 4 :
    case 5 :
      delivered_order = 5;
      _points.resize(3);
      _weight.resize(3);
      _points[0] = ct("0.7876594617608470560252418898759996233480800585109738408854524491392307168918253691359860554930833447");
      _weight[0] = ct("0.1396539598029082450677625443581538098252225758276251979994248447935389105334084604080564612661091634");
      _points[1] = ct("0.08858795951270394739554614376945619688572933192274956543116369516997648742681009672521930761610157858");
      _weight[1] = ct("0.4018638274779192615443962665291996972772826161899046690923842878330733109101018240536312300474029069");
      _points[2] = ct("0.4094668644407347108649262520688298940519048952805623079690981414050785099670788198530803511765293624");
      _weight[2] = ct("0.4584822127191724933878411891126464928974948079824701329081908673733877785564897155383123086864879298");
      break;
    case 6 :
    case 7 :
      delivered_order = 7;
      _points.resize(4);
      _weight.resize(4);
      _points[0] = ct("0.8602401356562194478479129188751197667383780225872255049242335941839742579301655644134901549264276107");
      _weight[0] = ct("0.0623619419000161643477502941931506212697875166839309830761809569911317040022539361293684065166161988");
      _points[1] = ct("0.5835904323689168200566976686629172486934326398967716401762938418317475019618310120056322774674562994");
      _weight[1] = ct("0.2596950952164648816529124057792580292271059432720818009310478738715197515684797549856501468079414159");
      _points[2] = ct("0.05710419611451768219312119255411562123507794559875016432780829293093467820207316458611381681984273682");
      _weight[2] = ct("0.2710138268629762324165283481558817992920669850614066882947002084270279998974049555934063155149987714");
      _points[3] = ct("0.2768430136381238276800459976856251411108891696950304683494420488311213396837080367725415285640511309");
      _weight[3] = ct("0.4069291360205427215828089518717095502110395549825805276980709607103205445318613532915751311604436132");
      break;
    case 8 :
    case 9 :
      delivered_order = 9;
      _points.resize(5);
      _weight.resize(5);
      _points[0] = ct("0.9014649142011735738765011021122473096194864304517102005637358130565651259599860618861752355046079332");
      _weight[0] = ct("0.03149582904338455237058463313697596258298062393862741207778897431029291618946468034442481885294203153");
      _points[1] = ct("0.6954642733536360945146148237211671613940015549986483590851972611325288138368238668739250465460035525");
      _weight[1] = ct("0.147817740145233340701266438683407157647088123302568081608965017046687166399586788131013562994436696");
      _points[2] = ct("0.03980985705146874234080669009333316770426265422838516194640774820496474562617430685450225908318456724");
      _weight[2] = ct("0.1935631804533033585487219432723014706300773723042959314554533779929073487933655762166538198748335154");
      _points[3] = ct("0.4379748102473861440050125200052288525167902742147401264690572735060053301210965344528972647247758255");
      _weight[3] = ct("0.2927739741693396173960757387119177719719819871066279796088146708892391099142328799058439924278608752");
      _points[4] = ct("0.1980134178736081725357921367952962360381863588337888792083291768272087117286465026597729214141553943");
      _weight[4] = ct("0.3343492761887391309833512461953976371678718933478805952489779597608734587033500754020638058499268799");
      break;
    case 10 :
    case 11 :
      delivered_order = 11;
      _points.resize(6);
      _weight.resize(6);
      _points[0] = ct("0.9269456713197411148518739658196820110561724195422832527244670796566452024525282438143394800135873916");
      _weight[0] = ct("0.01747660362721906351203460662479774148929411516337233806318102016698451025225396235129028371682599565");
      _points[1] = ct("0.7692338620300545009168833601156454518371421433222954161669481696365481305739532856852002115427743676");
      _weight[1] = ct("0.08791033110101795101635324861086019025599267125557955276461742797557562193809890394074140334644478675");
      _points[2] = ct("0.02931642715978489197205027691316491037373039256371492778691068394493603824166577874863094836518436948");
      _weight[2] = ct("0.1446206614510173673109086522496639352868157617754660467953566358954592311021538274525319681276946567");
      _points[3] = ct("0.5586715187715501320813933418055219400743682889654078255557472261173501228974210783238200520122825819");
      _weight[3] = ct("0.1973223017813105282411690210967195758979330860171400109013608542168691368036765872249948825320820935");
      _points[4] = ct("0.1480785996684842918499768524959792122302487748085944614125946418015983860908783218063693976617475761");
      _weight[4] = ct("0.2710849944630372336813807932761008554153744603412901289757132736303442652218840953547976196174453532");
      _points[5] = ct("0.3369846902811542990970529720807757051975687500284733471225629680736913505127840608524091411736544825");
      _weight[5] = ct("0.2815851075763978562381536781418577016545899054471519224997707881147672346819326236756438426595071102");
      break;
    default :
      DUNE_THROW(QuadratureOrderOutOfRange, "Quadrature rule " << p << " not supported!");
    }
  }

} // namespace
