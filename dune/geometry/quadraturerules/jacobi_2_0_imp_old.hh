// -*- tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
// vi: set et ts=4 sw=2 sts=2:
//
// WARNING
// This file is automatically generated by jacobian.mac! Don't edit by hand!

#ifndef DUNE_INCLUDING_IMPLEMENTATION
#error This is a private header that should not be included directly.
#error Use #include <dune/geometry/quadraturerules.hh> instead.
#endif
#undef DUNE_INCLUDING_IMPLEMENTATION

namespace Dune {

  // for fundamental types
  template<typename ct>
  void Jacobi2QuadratureInitHelper<ct,true>::init(int p,
         std::vector< FieldVector<ct, 1> > & _points,
         std::vector< ct > & _weight,
         int & delivered_order)
  {
    switch(p)
    {
    // order 0,1
    case 0 :
    case 1 :
      delivered_order = 1;
      _points.resize(1);
      _weight.resize(1);
      _points[0] = 0.25;
      _weight[0] = 1.333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333;
      break;

    // order 2,3
    case 2 :
    case 3 :
      delivered_order = 3;
      _points.resize(2);
      _weight.resize(2);
      _points[0] = 0.5441518440112252887999262362955145689146370092883477884571669901861729625759492147562832072252866864;
      _weight[0] = 0.4031435283193017223334255379639401221900370717228985977618745956006171301133968148879793243017249754;
      _points[1] = 0.1225148226554413778667404303711520977520296573783188782094996764804937040907174519103834594413799803;
      _weight[1] = 0.930189805014031610999907795369393211143296261610434735571458737732716203219936518445354009031608358;
      break;

    // order 4,5
    case 4 :
    case 5 :
      delivered_order = 5;
      _points.resize(3);
      _weight.resize(3);
      _points[0] = 0.7050022098884983831223984775840482527404615621673957968187330274666375934719617430536332178860666683;
      _weight[0] = 0.1198028120343227920459059630233091355547326268137250385594040589278280490932505000994631471190946468;
      _points[1] = 0.3470037660383518847217635434039484551401490745262501021878985827903559852608331357830049271464466709;
      _weight[1] = 0.5849850770394640880140480814569575834996833285430405912588393379710804430684155659655248860334828359;
      _points[2] = 0.07299402407314973215583797901200329211938936330635410099336838974300642126720512116336185496748666083;
      _weight[2] = 0.6285454442595464532733792888530666142789173779765677035150899364344248411716672672683453001807558508;
      break;

    // order 6,7
    case 6 :
    case 7 :
      delivered_order = 7;
      _points.resize(4);
      _weight.resize(4);
      _points[0] = 0.795851417896772863303377960793240153655111814369133947337218428490843889786355454581170273360860138;
      _weight[0] = 0.04140896299967226113759062618655673912665921802650887351261598768091744489940921375092075799421354484;
      _points[1] = 0.5170472951043675023405733693830732661441577674815143184126459202288394285156186604132268185358169055;
      _weight[1] = 0.2745355486916923012695053801672421777585462337521019227783801195324800153896617288464511839350699153;
      _points[2] = 0.04850054944699732929706725709898599476427280622804138308697676906809043140700237130756061833546337107;
      _weight[2] = 0.4435536624451119347329252698757826095062322419475350982016036681051358053754859408526879761621947264;
      _points[3] = 0.2386007375518623050589814127247005854364576119213103511631588822122262502910235136980422897678595854;
      _weight[3] = 0.5738351591968568361933120571037518069418956396071874388407335580148000676687764498832734152418551447;
      break;

    // order 8,9
    case 8 :
    case 9 :
      delivered_order = 9;
      _points.resize(5);
      _weight.resize(5);
      _points[0] = 0.8510542129470164181162241874100130578037999355252331298775577412327508226081337242789670271254366003;
      _weight[0] = 0.0164553008123960318344649664771932761384129705299198594819023493276538663334439422044756555173918885;
      _points[1] = 0.6343334726308867723471638889206191121277336440958369160307851769971809925102122993798727580295999099;
      _weight[1] = 0.1282224028918476770189957222265331112459675505313588758170175986042217305503148083830364356533270504;
      _points[2] = 0.03457893991821509152445742863152659272391875376414497155987987848502413583832078858238836643039194193;
      _weight[2] = 0.3270591371430836716195229316894094001951854345378653863487891391459565840633676758520507731631799336;
      _points[3] = 0.3898863870655193282408954103849949929685699479384607713625473160659384788871254703280644555908817828;
      _weight[3] = 0.3568006448863600007450179722815356404122106902138793907440693610940259530233602522779046002721091408;
      _points[4] = 0.1734803207716957231045924179861795777093110520096575445025632205524389034895410507640407261570230985;
      _weight[4] = 0.504795847599645952115331740658661905341556687520309820941554885161475199362846654615865868727325323;
      break;

    // order 10,11
    case 10 :
    case 11 :
      delivered_order = 11;
      _points.resize(6);
      _weight.resize(6);
      _points[0] = 0.8868056161775618663012660060104907510040863218112851455728573015303583622861762166128254348593013689;
      _weight[0] = 0.007324303227477190931113822360224935405864216618905867216202122367913348061134720321894342299951728867;
      _points[1] = 0.7156811273117139187676626245936073635482655112817582867648513925864912489801365831589316400094114546;
      _weight[1] = 0.06288118873978020531140504852007971390788413793492071598436679202370012665529257375196229311689702309;
      _points[2] = 0.5090364131647520840110399051677197756066865099413616255162800068449833494040551477253328196372325307;
      _weight[2] = 0.2051582845184648408805173003076769826286071695771531963106651422253387765576255251446619284393054827;
      _points[3] = 0.02590455509366719275464360699723454895681812392531925015861057429610266045438042891711695398904589615;
      _weight[3] = 0.2501548109063237515141062258733267440660779616350562328954095848025901035201055026000940757458649068;
      _points[4] = 0.3024369180228912327499055779185451938801342419623170862494499684632895155693734121375470591583017143;
      _weight[4] = 0.3783087469941648142731682068802065098680549714701846873490169027817905712014531819167360652747890985;
      _points[5] = 0.1315639416579851339869108507409737955754378625065300343093793277073462918773067828768175209181356068;
      _weight[5] = 0.429505998947122530423022729391818447456844876097112633577672789132000407337721829597984628456525117;
      break;

    default :
      DUNE_THROW(QuadratureOrderOutOfRange, "Quadrature rule " << p << " not supported!");
    }
  }

  // for non-fundamental types: assign numbers as strings
  template<typename ct>
  void Jacobi2QuadratureInitHelper<ct,false>::init(int p,
         std::vector< FieldVector<ct, 1> > & _points,
         std::vector< ct > & _weight,
         int & delivered_order)
  {
    switch(p)
    {
    // order 0,1
    case 0 :
    case 1 :
      delivered_order = 1;
      _points.resize(1);
      _weight.resize(1);
      _points[0] = ct("0.25");
      _weight[0] = ct("1.333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333");
      break;

    // order 2,3
    case 2 :
    case 3 :
      delivered_order = 3;
      _points.resize(2);
      _weight.resize(2);
      _points[0] = ct("0.5441518440112252887999262362955145689146370092883477884571669901861729625759492147562832072252866864");
      _weight[0] = ct("0.4031435283193017223334255379639401221900370717228985977618745956006171301133968148879793243017249754");
      _points[1] = ct("0.1225148226554413778667404303711520977520296573783188782094996764804937040907174519103834594413799803");
      _weight[1] = ct("0.930189805014031610999907795369393211143296261610434735571458737732716203219936518445354009031608358");
      break;

    // order 4,5
    case 4 :
    case 5 :
      delivered_order = 5;
      _points.resize(3);
      _weight.resize(3);
      _points[0] = ct("0.7050022098884983831223984775840482527404615621673957968187330274666375934719617430536332178860666683");
      _weight[0] = ct("0.1198028120343227920459059630233091355547326268137250385594040589278280490932505000994631471190946468");
      _points[1] = ct("0.3470037660383518847217635434039484551401490745262501021878985827903559852608331357830049271464466709");
      _weight[1] = ct("0.5849850770394640880140480814569575834996833285430405912588393379710804430684155659655248860334828359");
      _points[2] = ct("0.07299402407314973215583797901200329211938936330635410099336838974300642126720512116336185496748666083");
      _weight[2] = ct("0.6285454442595464532733792888530666142789173779765677035150899364344248411716672672683453001807558508");
      break;

    // order 6,7
    case 6 :
    case 7 :
      delivered_order = 7;
      _points.resize(4);
      _weight.resize(4);
      _points[0] = ct("0.795851417896772863303377960793240153655111814369133947337218428490843889786355454581170273360860138");
      _weight[0] = ct("0.04140896299967226113759062618655673912665921802650887351261598768091744489940921375092075799421354484");
      _points[1] = ct("0.5170472951043675023405733693830732661441577674815143184126459202288394285156186604132268185358169055");
      _weight[1] = ct("0.2745355486916923012695053801672421777585462337521019227783801195324800153896617288464511839350699153");
      _points[2] = ct("0.04850054944699732929706725709898599476427280622804138308697676906809043140700237130756061833546337107");
      _weight[2] = ct("0.4435536624451119347329252698757826095062322419475350982016036681051358053754859408526879761621947264");
      _points[3] = ct("0.2386007375518623050589814127247005854364576119213103511631588822122262502910235136980422897678595854");
      _weight[3] = ct("0.5738351591968568361933120571037518069418956396071874388407335580148000676687764498832734152418551447");
      break;

    // order 8,9
    case 8 :
    case 9 :
      delivered_order = 9;
      _points.resize(5);
      _weight.resize(5);
      _points[0] = ct("0.8510542129470164181162241874100130578037999355252331298775577412327508226081337242789670271254366003");
      _weight[0] = ct("0.0164553008123960318344649664771932761384129705299198594819023493276538663334439422044756555173918885");
      _points[1] = ct("0.6343334726308867723471638889206191121277336440958369160307851769971809925102122993798727580295999099");
      _weight[1] = ct("0.1282224028918476770189957222265331112459675505313588758170175986042217305503148083830364356533270504");
      _points[2] = ct("0.03457893991821509152445742863152659272391875376414497155987987848502413583832078858238836643039194193");
      _weight[2] = ct("0.3270591371430836716195229316894094001951854345378653863487891391459565840633676758520507731631799336");
      _points[3] = ct("0.3898863870655193282408954103849949929685699479384607713625473160659384788871254703280644555908817828");
      _weight[3] = ct("0.3568006448863600007450179722815356404122106902138793907440693610940259530233602522779046002721091408");
      _points[4] = ct("0.1734803207716957231045924179861795777093110520096575445025632205524389034895410507640407261570230985");
      _weight[4] = ct("0.504795847599645952115331740658661905341556687520309820941554885161475199362846654615865868727325323");
      break;

    // order 10,11
    case 10 :
    case 11 :
      delivered_order = 11;
      _points.resize(6);
      _weight.resize(6);
      _points[0] = ct("0.8868056161775618663012660060104907510040863218112851455728573015303583622861762166128254348593013689");
      _weight[0] = ct("0.007324303227477190931113822360224935405864216618905867216202122367913348061134720321894342299951728867");
      _points[1] = ct("0.7156811273117139187676626245936073635482655112817582867648513925864912489801365831589316400094114546");
      _weight[1] = ct("0.06288118873978020531140504852007971390788413793492071598436679202370012665529257375196229311689702309");
      _points[2] = ct("0.5090364131647520840110399051677197756066865099413616255162800068449833494040551477253328196372325307");
      _weight[2] = ct("0.2051582845184648408805173003076769826286071695771531963106651422253387765576255251446619284393054827");
      _points[3] = ct("0.02590455509366719275464360699723454895681812392531925015861057429610266045438042891711695398904589615");
      _weight[3] = ct("0.2501548109063237515141062258733267440660779616350562328954095848025901035201055026000940757458649068");
      _points[4] = ct("0.3024369180228912327499055779185451938801342419623170862494499684632895155693734121375470591583017143");
      _weight[4] = ct("0.3783087469941648142731682068802065098680549714701846873490169027817905712014531819167360652747890985");
      _points[5] = ct("0.1315639416579851339869108507409737955754378625065300343093793277073462918773067828768175209181356068");
      _weight[5] = ct("0.429505998947122530423022729391818447456844876097112633577672789132000407337721829597984628456525117");
      break;

    default :
      DUNE_THROW(QuadratureOrderOutOfRange, "Quadrature rule " << p << " not supported!");
    }
  }

} // namespace
